import{_ as e,o as a,c as i,d as n}from"./app-b50826da.js";const s={},t=n(`<h1 id="git代理配置" tabindex="-1"><a class="header-anchor" href="#git代理配置" aria-hidden="true">#</a> git代理配置</h1><h2 id="查看当前代理设置" tabindex="-1"><a class="header-anchor" href="#查看当前代理设置" aria-hidden="true">#</a> 查看当前代理设置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config --<span class="token punctuation">[</span>global<span class="token punctuation">]</span><span class="token punctuation">(</span>https://so.csdn.net/so/search?q<span class="token operator">=</span>global<span class="token operator">&amp;</span><span class="token assign-left variable">spm</span><span class="token operator">=</span><span class="token number">1001.2101</span>.3001.7020<span class="token punctuation">)</span> <span class="token parameter variable">--get</span> http.proxy

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理" aria-hidden="true">#</a> 设置代理</h2><p>设置当前代理为 <code>http://127.0.0.1:7890</code> 或 <code>socket5://127.0.0.1:7890</code> 端口根据自己情况来。</p><ul><li>http:<br><code>git config --global http.proxy &#39;http://127.0.0.1:1080&#39; </code></li><li>https:<br><code>git config --global https.proxy &#39;http://127.0.0.1:1080&#39; </code></li><li>socks5:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">&#39;socks5://127.0.0.1:1080&#39;</span>

<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">&#39;socks5://127.0.0.1:1080&#39;</span> /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除代理" tabindex="-1"><a class="header-anchor" href="#删除代理" aria-hidden="true">#</a> 删除代理</h2><p><code>git config --global --unset https.proxy</code></p><h1 id="关联仓库" tabindex="-1"><a class="header-anchor" href="#关联仓库" aria-hidden="true">#</a> 关联仓库</h1><ul><li>关联上游仓库</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote add upstream xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>更新合并上游仓库</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git fetch upstream 
git merge upstream/上游具体分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地关联、修改、删除远程仓库" tabindex="-1"><a class="header-anchor" href="#本地关联、修改、删除远程仓库" aria-hidden="true">#</a> 本地关联、修改、删除远程仓库</h2><ul><li><p>关联远程仓库 <code>git remote add origin xxx</code></p></li><li><p>修改远程仓库地址 <code>git remote set-url origin xxx.git</code></p></li><li><p>删除关联的远程仓库 <code>git remote rm origin</code></p></li></ul><h1 id="git-忽略规则-gitignore配置-不生效原因和解决" tabindex="-1"><a class="header-anchor" href="#git-忽略规则-gitignore配置-不生效原因和解决" aria-hidden="true">#</a> Git-忽略规则(.gitignore配置）不生效原因和解决</h1><p>原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的。</p><p>解决方法:</p><p>git清除本地缓存（改变成未track状态），然后再提交 <code>git rm -r --cached .</code><code>git add .</code></p><h1 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h1><h1 id="分支同步问题" tabindex="-1"><a class="header-anchor" href="#分支同步问题" aria-hidden="true">#</a> 分支同步问题</h1><p>情况：<br> 两台机器用同一个远程仓库，在a机器上clone到代码后本地创建一个a1分支进行开发后提交分支到远程仓库。</p><p>b机器拉到代码后，此时b机器本地是没有a机器提交的分支的，怎么获取呢？</p><ul><li>直接在本地切换远程分支就会自动创建和同步远程分支 <code>git checkout a1</code></li></ul><p>或</p><ul><li>本地直接创建并且切换到新分支 <code>git checkout -b a1 origin a1</code></li></ul><h2 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支" aria-hidden="true">#</a> 查看分支</h2><ul><li>查看所有分支</li><li><code>git branch -a</code></li><li>查看远程分支 <code>git branch -r</code></li></ul><h2 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h2><ul><li>创建分支、切换分支</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch xxx
git checkout xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建分支且切换到新分支</li></ul><p><code>git checkout -b xxx</code></p><h2 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h2><ul><li><p>删除本地分支<br><code>git branch -d xxx分支</code> 当一个分支被推送并合并到远程分支后，<code>-d</code> 才会本地删除该分支。如果一个分支还没有被推送或者合并，那么可以使用<code>-D</code>强制删除它。</p></li><li><p>删除远程分支<br><code>git push origin --delete xxx分支名称</code></p></li></ul><h2 id="分支覆盖" tabindex="-1"><a class="header-anchor" href="#分支覆盖" aria-hidden="true">#</a> 分支覆盖</h2><ul><li>放弃本地修改，用远程分支覆盖本地分支</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token parameter variable">--all</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master <span class="token punctuation">(</span>这里master为对应的分支名<span class="token punctuation">)</span>
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>强制覆盖远程分支</li></ul><p><code>git push origin 分支名 --force</code></p><h1 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退" aria-hidden="true">#</a> 版本回退</h1><ul><li>回退指定版本（直接回退到指定版本，目标版本之后的提交将被删除） <code>git log</code> 查看提交日志</li></ul><p><code>git reset –hard 版本号</code></p>`,44),d=[t];function l(r,c){return a(),i("div",null,d)}const h=e(s,[["render",l],["__file","gitchangyongzhiling.html.vue"]]);export{h as default};
